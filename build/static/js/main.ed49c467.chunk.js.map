{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","onChange","e","console","log","target","value","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","filterHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4OA2CeA,EAzCF,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,aAAcC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,UAmBxD,OACE,8BACE,2BACEC,SArBmB,SAACC,GACxBC,QAAQC,IAAIF,EAAEG,QACdT,EAAaM,EAAEG,OAAOC,QAoBlBC,KAAK,OACLD,MAAOP,EACPS,UAAU,eAEZ,4BAAQA,UAAU,cAAcD,KAAK,SAASE,QArBxB,SAACP,GACzBA,EAAEQ,iBACFZ,EAAS,GAAD,mBACHD,GADG,CAEN,CAAEc,KAAMZ,EAAWa,WAAW,EAAOC,GAAoB,IAAhBC,KAAKC,aAEhDnB,EAAa,MAgBT,uBAAGY,UAAU,wBAEf,yBAAKA,UAAU,UACb,4BAAQP,SAhBQ,SAAAC,GACpBF,EAAUE,EAAEG,OAAOC,QAekBU,KAAK,QAAQR,UAAU,eACtD,4BAAQF,MAAM,OAAd,OACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,eAAd,mB,OCAKW,EAlCF,SAAC,GAAqC,IAAnCN,EAAkC,EAAlCA,KAAMO,EAA4B,EAA5BA,KAAMrB,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAmBjC,OACE,yBAAKU,UAAU,QACb,wBAAIA,UAAS,oBAAeU,EAAKN,UAAY,YAAc,KACxDD,GAEH,4BAAQH,UAAU,eAAeC,QAnBb,WACtBX,EACED,EAAMsB,KAAI,SAACC,GACT,OAAIA,EAAKP,KAAOK,EAAKL,GACZ,2BACFO,GADL,IAEER,WAAYQ,EAAKR,YAGdQ,QAWP,uBAAGZ,UAAU,kBAEf,4BAAQC,QA1BU,WACpBX,EAASD,EAAMwB,QAAO,SAACC,GAAD,OAAQA,EAAGT,KAAOK,EAAKL,QAyBXL,UAAU,aACxC,uBAAGA,UAAU,oBCPNe,EApBE,SAAC,GAAwC,IAAtC1B,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAU0B,EAAoB,EAApBA,cACnC,OACE,yBAAKhB,UAAU,kBACb,wBAAIA,UAAU,aACXgB,EAAcL,KAAI,SAACD,GAClB,OACE,kBAAC,EAAD,CACEpB,SAAUA,EACVa,KAAMO,EAAKP,KACXc,IAAKP,EAAKL,GACVK,KAAMA,EACNrB,MAAOA,UCwCN6B,MAjDf,WAAe,MAEqBC,mBAAS,IAF9B,mBAEN5B,EAFM,KAEKH,EAFL,OAGa+B,mBAAS,IAHtB,mBAGN9B,EAHM,KAGCC,EAHD,OAIe6B,mBAAS,OAJxB,mBAINC,EAJM,KAIE5B,EAJF,OAK6B2B,mBAAS,IALtC,mBAKNH,EALM,KAKSK,EALT,KA4Bb,OApBAC,qBAAU,YACc,WACpB,OAAQF,GACN,IAAK,YACHC,EAAiBhC,EAAMwB,QAAO,SAACH,GAAD,OAA6B,IAAnBA,EAAKN,cAC7C,MACF,IAAK,cACHiB,EAAiBhC,EAAMwB,QAAO,SAACH,GAAD,OAA6B,IAAnBA,EAAKN,cAC7C,MACF,QACEiB,EAAiBhC,IAKvBkC,KACC,CAACH,EAAQ/B,IAKV,yBAAKW,UAAU,OACb,gCACE,6CAEF,kBAAC,EAAD,CACEX,MAAOA,EACPC,SAAUA,EACVF,aAAcA,EACdG,UAAWA,EACXC,UAAWA,IAEb,kBAAC,EAAD,CACEF,SAAUA,EACVD,MAAOA,EACP2B,cAAeA,MCpCHQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.ed49c467.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Form = ({ setInputText, todos, setTodos, inputText, setStatus}) => {\r\n  const inputTextHandler = (e) => {\r\n    console.log(e.target)\r\n    setInputText(e.target.value)\r\n  }\r\n\r\n  const submitTodoHandler = (e) => {\r\n    e.preventDefault()\r\n    setTodos([\r\n      ...todos,\r\n      { text: inputText, completed: false, id: Math.random() * 1000 },\r\n    ])\r\n    setInputText('')\r\n  }\r\n\r\n  const statusHandler = e => {\r\n    setStatus(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <form>\r\n      <input\r\n        onChange={inputTextHandler}\r\n        type='text'\r\n        value={inputText}\r\n        className='todo-input'\r\n      />\r\n      <button className='todo-button' type='submit' onClick={submitTodoHandler}>\r\n        <i className='fas fa-plus-square'></i>\r\n      </button>\r\n      <div className='select'>\r\n        <select onChange={statusHandler} name='todos' className='filter-todo'>\r\n          <option value='all'>All</option>\r\n          <option value='completed'>Completed</option>\r\n          <option value='uncompleted'>Uncompleted</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\nconst Todo = ({ text, todo, todos, setTodos }) => {\r\n  const deleteHandler = () => {\r\n    setTodos(todos.filter((el) => el.id !== todo.id))\r\n  }\r\n\r\n  const completeHandler = () => {\r\n    setTodos(\r\n      todos.map((item) => {\r\n        if (item.id === todo.id) {\r\n          return {\r\n            ...item,\r\n            completed: !item.completed,\r\n          }\r\n        }\r\n        return item\r\n      })\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className='todo'>\r\n      <li className={`todo-item ${todo.completed ? 'completed' : ''}`}>\r\n        {text}\r\n      </li>\r\n      <button className='complete-btn' onClick={completeHandler}>\r\n        <i className='fas fa-check'></i>\r\n      </button>\r\n      <button onClick={deleteHandler} className='trash-btn'>\r\n        <i className='fas fa-trash'></i>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\nimport Todo from './Todo'\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\r\n  return (\r\n    <div className='todo-container'>\r\n      <ul className='todo-list'>\r\n        {filteredTodos.map((todo) => {\r\n          return (\r\n            <Todo\r\n              setTodos={setTodos}\r\n              text={todo.text}\r\n              key={todo.id}\r\n              todo={todo}\r\n              todos={todos}\r\n            />\r\n          )\r\n        })}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList\r\n","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Form from './components/Form'\nimport TodoList from './components/TodoList'\n\nfunction App() {\n  // States\n  const [inputText, setInputText] = useState('')\n  const [todos, setTodos] = useState([])\n  const [status, setStatus] = useState('all')\n  const [filteredTodos, setFilteredTodos] = useState([])\n\n  // USE EFFECT\n  useEffect(() => {\n    const filterHandler = () => {\n      switch (status) {\n        case 'completed':\n          setFilteredTodos(todos.filter((todo) => todo.completed === true))\n          break\n        case 'uncompleted':\n          setFilteredTodos(todos.filter((todo) => todo.completed === false))\n          break\n        default:\n          setFilteredTodos(todos)\n          break\n      }\n    }\n\n    filterHandler()\n  }, [status, todos])\n\n  // Functions\n\n  return (\n    <div className='App'>\n      <header>\n        <h1>My Todo List</h1>\n      </header>\n      <Form\n        todos={todos}\n        setTodos={setTodos}\n        setInputText={setInputText}\n        inputText={inputText}\n        setStatus={setStatus}\n      />\n      <TodoList\n        setTodos={setTodos}\n        todos={todos}\n        filteredTodos={filteredTodos}\n      />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}